# cgbookstore/apps/chatbot_literario/tests/test_command_add_help_knowledge.py

import pytest
from io import StringIO
from django.core.management import call_command
from cgbookstore.apps.chatbot_literario.models import KnowledgeItem


@pytest.mark.django_db
class TestAddHelpKnowledgeCommand:
    """
    Testes para o comando de gerenciamento `add_help_knowledge`.
    """

    def test_command_runs_successfully_and_creates_items(self):
        """
        Verifica se o comando executa sem erros e cria o n√∫mero esperado de itens de conhecimento.
        """
        assert KnowledgeItem.objects.count() == 0
        out = StringIO()
        call_command('add_help_knowledge', stdout=out)

        assert KnowledgeItem.objects.count() == 13, "O n√∫mero de itens criados n√£o corresponde ao esperado."

        output = out.getvalue()
        # ‚úÖ CORRE√á√ÉO: Verifica uma parte da nova mensagem de sucesso que √© mais gen√©rica.
        assert "‚úÖ Processo conclu√≠do." in output, "A mensagem de sucesso n√£o foi encontrada na sa√≠da."
        assert "13 novos itens adicionados" in output, "A contagem de itens criados na sa√≠da est√° incorreta."
        assert "üìä Estat√≠sticas atuais da base:" in output, "As estat√≠sticas n√£o foram exibidas."

    def test_created_items_have_correct_data(self):
        """
        Verifica se os dados gravados no banco de dados correspondem exatamente
        aos dados definidos no script do comando.
        """
        call_command('add_help_knowledge')

        help_item = KnowledgeItem.objects.get(question="O que voc√™ pode fazer?")
        assert help_item.category == "ajuda"
        # ‚úÖ CORRE√á√ÉO: Esta asser√ß√£o passar√° assim que a resposta "..." for corrigida no comando.
        assert "‚Ä¢ üìö Informa√ß√µes sobre livros" in help_item.answer
        assert help_item.source == "manual"

        rec_item = KnowledgeItem.objects.get(question="Me recomenda um livro de fic√ß√£o cient√≠fica")
        assert rec_item.category == "recomendacao"
        assert "‚Ä¢ Duna - Frank Herbert" in rec_item.answer
        assert rec_item.source == "manual"

        nav_item = KnowledgeItem.objects.get(question="Como adiciono um livro ao carrinho?")
        assert nav_item.category == "navegacao"
        assert "Clique no bot√£o 'Adicionar ao Carrinho'" in nav_item.answer
        assert nav_item.source == "manual"

    # ‚ùå A√á√ÉO: O teste `test_running_command_twice_creates_duplicates` foi REMOVIDO.

    def test_command_is_idempotent(self):
        """
        Verifica se o comando √© idempotente, ou seja, execut√°-lo
        mais de uma vez n√£o cria novos registros ap√≥s a primeira execu√ß√£o.
        """
        assert KnowledgeItem.objects.count() == 0

        # Primeira execu√ß√£o
        out1 = StringIO()
        call_command('add_help_knowledge', stdout=out1)
        assert KnowledgeItem.objects.count() == 13
        assert "13 novos itens adicionados" in out1.getvalue()

        # Segunda execu√ß√£o
        out2 = StringIO()
        call_command('add_help_knowledge', stdout=out2)
        assert KnowledgeItem.objects.count() == 13, "O comando n√£o √© idempotente, criou duplicatas."
        # ‚úÖ CORRE√á√ÉO: Verifica a sa√≠da da segunda execu√ß√£o.
        assert "0 novos itens adicionados" in out2.getvalue(), "A sa√≠da da segunda execu√ß√£o deveria indicar 0 cria√ß√µes."
        assert "13 itens atualizados" in out2.getvalue(), "A sa√≠da da segunda execu√ß√£o deveria indicar 13 atualiza√ß√µes."