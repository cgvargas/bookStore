# Generated by Django 5.1.4 on 2025-04-29 14:38

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0043_author_authorsection_authorsectionitem_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='Nome')),
                ('description', models.TextField(verbose_name='Descrição')),
                ('icon', models.CharField(help_text="Classe do ícone Bootstrap (ex: 'bi-book')", max_length=50)),
                ('category', models.CharField(choices=[('reading', 'Leitura'), ('collection', 'Coleção'), ('social', 'Social'), ('exploration', 'Exploração'), ('special', 'Especial')], max_length=20, verbose_name='Categoria')),
                ('tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Prata'), ('gold', 'Ouro'), ('platinum', 'Platina')], default='bronze', max_length=10, verbose_name='Nível')),
                ('points', models.IntegerField(default=10, verbose_name='Pontos')),
                ('requirement', models.JSONField(blank=True, default=dict, verbose_name='Requisitos')),
                ('is_secret', models.BooleanField(default=False, verbose_name='Secreto')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Conquista',
                'verbose_name_plural': 'Conquistas',
                'ordering': ['category', 'tier', 'points'],
            },
        ),
        migrations.CreateModel(
            name='ReadingStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_books_read', models.IntegerField(default=0, verbose_name='Total de Livros Lidos')),
                ('total_pages_read', models.IntegerField(default=0, verbose_name='Total de Páginas Lidas')),
                ('reading_streak', models.IntegerField(default=0, verbose_name='Sequência Atual')),
                ('longest_streak', models.IntegerField(default=0, verbose_name='Maior Sequência')),
                ('favorite_genre', models.CharField(blank=True, max_length=50, verbose_name='Gênero Favorito')),
                ('reading_velocity', models.FloatField(default=0.0, verbose_name='Velocidade de Leitura')),
                ('books_by_month', models.JSONField(blank=True, default=dict, verbose_name='Livros por Mês')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Estatísticas de Leitura',
                'verbose_name_plural': 'Estatísticas de Leitura',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achieved_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Conquista')),
                ('progress_data', models.JSONField(blank=True, default=dict, verbose_name='Dados de Progresso')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.achievement', verbose_name='Conquista')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Conquista do Usuário',
                'verbose_name_plural': 'Conquistas dos Usuários',
                'ordering': ['-achieved_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
