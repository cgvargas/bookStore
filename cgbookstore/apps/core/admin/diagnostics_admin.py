# cgbookstore/apps/core/admin/diagnostics_admin.py
"""
M√≥dulo administrativo para ferramentas de diagn√≥stico do sistema.
Integra√ß√£o com os comandos de performance e manuten√ß√£o.
"""

import json
import threading
from datetime import datetime
from io import StringIO
import sys

from django.contrib import admin
from django.http import JsonResponse, HttpResponse
from django.shortcuts import render, redirect
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib import messages
from django.urls import path, reverse
from django.core.management import call_command
from django.core.cache import caches
from django.utils.decorators import method_decorator

from .mixins import LoggingAdminMixin


class DiagnosticsAdmin:
    """
    Classe para gerenciar ferramentas de diagn√≥stico no admin
    """

    def __init__(self, admin_site):
        self.admin_site = admin_site
        self.running_tasks = {}  # Para tracking de tarefas em execu√ß√£o

    def get_urls(self):
        """URLs para as ferramentas de diagn√≥stico"""
        urls = [
            path('diagnostics/', self.diagnostics_dashboard, name='diagnostics_dashboard'),
            path('diagnostics/performance/', self.performance_diagnostics, name='performance_diagnostics'),
            path('diagnostics/redis-info/', self.redis_info, name='redis_info'),
            path('diagnostics/fix-covers/', self.fix_corrupted_covers, name='fix_corrupted_covers'),
            path('diagnostics/debug-books/', self.debug_book_images, name='debug_book_images'),
            path('diagnostics/debug-recommendations/', self.debug_recommendations, name='debug_recommendations'),
            path('diagnostics/system-health/', self.system_health_check, name='system_health_check'),
            path('diagnostics/clear-cache/', self.clear_cache, name='clear_cache'),
            path('diagnostics/task-status/<str:task_id>/', self.task_status, name='task_status'),
        ]
        return urls

    @method_decorator(staff_member_required, name='dispatch')
    def diagnostics_dashboard(self, request):
        """Dashboard principal de diagn√≥sticos"""
        context = {
            'title': 'Ferramentas de Diagn√≥stico',
            'site_title': 'CG BookStore Admin',
            'site_header': 'Administra√ß√£o CG BookStore',
            'tools': [
                {
                    'name': 'Diagn√≥stico de Performance',
                    'description': 'An√°lise completa de performance do sistema',
                    'url': reverse('admin:performance_diagnostics'),
                    'icon': 'üöÄ',
                    'category': 'performance'
                },
                {
                    'name': 'Informa√ß√µes do Redis',
                    'description': 'Status e estat√≠sticas do cache Redis',
                    'url': reverse('admin:redis_info'),
                    'icon': 'üíæ',
                    'category': 'cache'
                },
                {
                    'name': 'Corrigir Capas Corrompidas',
                    'description': 'Detecta e corrige imagens de capas corrompidas',
                    'url': reverse('admin:fix_corrupted_covers'),
                    'icon': 'üñºÔ∏è',
                    'category': 'maintenance'
                },
                {
                    'name': 'Debug de Imagens',
                    'description': 'Diagn√≥stico de problemas com imagens de livros',
                    'url': reverse('admin:debug_book_images'),
                    'icon': 'üîç',
                    'category': 'debug'
                },
                {
                    'name': 'Debug de Recomenda√ß√µes',
                    'description': 'An√°lise do sistema de recomenda√ß√µes',
                    'url': reverse('admin:debug_recommendations'),
                    'icon': 'üéØ',
                    'category': 'debug'
                },
                {
                    'name': 'Health Check do Sistema',
                    'description': 'Verifica√ß√£o geral da sa√∫de do sistema',
                    'url': reverse('admin:system_health_check'),
                    'icon': 'üíö',
                    'category': 'monitoring'
                },
                {
                    'name': 'Limpar Cache',
                    'description': 'Limpeza seletiva dos caches do sistema',
                    'url': reverse('admin:clear_cache'),
                    'icon': 'üßπ',
                    'category': 'cache'
                }
            ],
            'running_tasks': self.running_tasks
        }

        return render(request, 'admin/diagnostics/dashboard.html', context)

    def performance_diagnostics(self, request):
        """Executa diagn√≥stico de performance"""
        if request.method == 'POST':
            # Par√¢metros do formul√°rio
            test_type = request.POST.get('test_type', 'quick')
            output_format = request.POST.get('output_format', 'console')
            save_report = request.POST.get('save_report', False)

            try:
                # Executar comando em thread separada para n√£o bloquear
                task_id = f"perf_diag_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

                def run_diagnostics():
                    try:
                        args = []
                        if test_type == 'quick':
                            args.append('--quick')
                        elif test_type == 'deep':
                            args.append('--deep')

                        if output_format != 'console':
                            args.extend(['--output', output_format])

                        if save_report:
                            filename = f'performance_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
                            args.extend(['--save-report', filename])

                        # Capturar output
                        old_stdout = sys.stdout
                        sys.stdout = mystdout = StringIO()

                        try:
                            call_command('performance_diagnostics', *args)
                            output = mystdout.getvalue()
                        finally:
                            sys.stdout = old_stdout

                        self.running_tasks[task_id] = {
                            'status': 'completed',
                            'output': output,
                            'completed_at': datetime.now()
                        }

                    except Exception as e:
                        self.running_tasks[task_id] = {
                            'status': 'error',
                            'error': str(e),
                            'completed_at': datetime.now()
                        }

                # Iniciar tarefa
                self.running_tasks[task_id] = {
                    'status': 'running',
                    'started_at': datetime.now()
                }

                thread = threading.Thread(target=run_diagnostics)
                thread.daemon = True
                thread.start()

                messages.success(request, f'Diagn√≥stico iniciado! ID da tarefa: {task_id}')
                return redirect('admin:diagnostics_dashboard')

            except Exception as e:
                messages.error(request, f'Erro ao iniciar diagn√≥stico: {e}')

        context = {
            'title': 'Diagn√≥stico de Performance',
            'site_title': 'CG BookStore Admin',
            'site_header': 'Administra√ß√£o CG BookStore',
            'form_action': reverse('admin:performance_diagnostics')
        }

        return render(request, 'admin/diagnostics/performance_form.html', context)

    def redis_info(self, request):
        """Exibe informa√ß√µes do Redis"""
        try:
            old_stdout = sys.stdout
            sys.stdout = mystdout = StringIO()

            try:
                call_command('redis_info')
                output = mystdout.getvalue()
            finally:
                sys.stdout = old_stdout

            context = {
                'title': 'Informa√ß√µes do Redis',
                'site_title': 'CG BookStore Admin',
                'site_header': 'Administra√ß√£o CG BookStore',
                'output': output,
                'success': True
            }

        except Exception as e:
            context = {
                'title': 'Informa√ß√µes do Redis',
                'site_title': 'CG BookStore Admin',
                'site_header': 'Administra√ß√£o CG BookStore',
                'error': str(e),
                'success': False
            }

        return render(request, 'admin/diagnostics/command_output.html', context)

    def fix_corrupted_covers(self, request):
        """Executa corre√ß√£o de capas corrompidas"""
        if request.method == 'POST':
            try:
                old_stdout = sys.stdout
                sys.stdout = mystdout = StringIO()

                try:
                    call_command('fix_corrupted_covers')
                    output = mystdout.getvalue()
                    messages.success(request, 'Corre√ß√£o de capas executada com sucesso!')
                finally:
                    sys.stdout = old_stdout

                context = {
                    'title': 'Corre√ß√£o de Capas Corrompidas',
                    'site_title': 'CG BookStore Admin',
                    'site_header': 'Administra√ß√£o CG BookStore',
                    'output': output,
                    'success': True
                }

            except Exception as e:
                messages.error(request, f'Erro ao executar corre√ß√£o: {e}')
                context = {
                    'title': 'Corre√ß√£o de Capas Corrompidas',
                    'site_title': 'CG BookStore Admin',
                    'site_header': 'Administra√ß√£o CG BookStore',
                    'error': str(e),
                    'success': False
                }

            return render(request, 'admin/diagnostics/command_output.html', context)

        # GET - Exibe formul√°rio de confirma√ß√£o
        context = {
            'title': 'Corre√ß√£o de Capas Corrompidas',
            'site_title': 'CG BookStore Admin',
            'site_header': 'Administra√ß√£o CG BookStore',
            'action_url': reverse('admin:fix_corrupted_covers'),
            'description': 'Esta ferramenta ir√° verificar e corrigir capas de livros corrompidas.',
            'warning': 'Esta opera√ß√£o pode demorar alguns minutos dependendo do n√∫mero de livros.'
        }

        return render(request, 'admin/diagnostics/confirm_action.html', context)

    def debug_book_images(self, request):
        """Debug de imagens de livros"""
        try:
            old_stdout = sys.stdout
            sys.stdout = mystdout = StringIO()

            try:
                call_command('debug_book_images')
                output = mystdout.getvalue()
            finally:
                sys.stdout = old_stdout

            context = {
                'title': 'Debug de Imagens de Livros',
                'site_title': 'CG BookStore Admin',
                'site_header': 'Administra√ß√£o CG BookStore',
                'output': output,
                'success': True
            }

        except Exception as e:
            context = {
                'title': 'Debug de Imagens de Livros',
                'site_title': 'CG BookStore Admin',
                'site_header': 'Administra√ß√£o CG BookStore',
                'error': str(e),
                'success': False
            }

        return render(request, 'admin/diagnostics/command_output.html', context)

    def debug_recommendations(self, request):
        """Debug do sistema de recomenda√ß√µes"""
        try:
            old_stdout = sys.stdout
            sys.stdout = mystdout = StringIO()

            try:
                call_command('debug_recommendations')
                output = mystdout.getvalue()
            finally:
                sys.stdout = old_stdout

            context = {
                'title': 'Debug de Recomenda√ß√µes',
                'site_title': 'CG BookStore Admin',
                'site_header': 'Administra√ß√£o CG BookStore',
                'output': output,
                'success': True
            }

        except Exception as e:
            context = {
                'title': 'Debug de Recomenda√ß√µes',
                'site_title': 'CG BookStore Admin',
                'site_header': 'Administra√ß√£o CG BookStore',
                'error': str(e),
                'success': False
            }

        return render(request, 'admin/diagnostics/command_output.html', context)

    def system_health_check(self, request):
        """Health check geral do sistema"""
        try:
            old_stdout = sys.stdout
            sys.stdout = mystdout = StringIO()

            try:
                call_command('system_health_check')
                output = mystdout.getvalue()
            finally:
                sys.stdout = old_stdout

            context = {
                'title': 'Health Check do Sistema',
                'site_title': 'CG BookStore Admin',
                'site_header': 'Administra√ß√£o CG BookStore',
                'output': output,
                'success': True
            }

        except Exception as e:
            context = {
                'title': 'Health Check do Sistema',
                'site_title': 'CG BookStore Admin',
                'site_header': 'Administra√ß√£o CG BookStore',
                'error': str(e),
                'success': False
            }

        return render(request, 'admin/diagnostics/command_output.html', context)

    def clear_cache(self, request):
        """Limpa caches do sistema"""
        if request.method == 'POST':
            cache_type = request.POST.get('cache_type', 'all')

            try:
                if cache_type == 'all':
                    # Limpa todos os caches EXCETO o cache de sess√£o
                    for cache_name in ['recommendations', 'google_books', 'image_proxy']:
                        try:
                            cache = caches[cache_name]
                            cache.clear()
                        except Exception:
                            pass

                    # Limpa o cache padr√£o de forma seletiva para preservar sess√µes
                    try:
                        from django.core.cache import cache as default_cache
                        # Lista de chaves conhecidas para limpar (evita limpar sess√µes)
                        known_cache_keys = [
                            'book_category_config',
                            'homepage_shelves',
                            'recommended_books',
                            'user_activity_stats',
                            'book_statistics'
                        ]
                        for key in known_cache_keys:
                            default_cache.delete(key)
                    except Exception:
                        pass

                    messages.success(request, 'Todos os caches foram limpos com sucesso!')
                else:
                    # Limpa cache espec√≠fico (apenas se n√£o for o padr√£o)
                    if cache_type != 'default':
                        cache = caches[cache_type]
                        cache.clear()
                        messages.success(request, f'Cache "{cache_type}" limpo com sucesso!')
                    else:
                        messages.warning(request,
                                         'Cache padr√£o n√£o pode ser limpo completamente para preservar sess√µes.')

            except Exception as e:
                messages.error(request, f'Erro ao limpar cache: {e}')

            # CORRE√á√ÉO: Usar HttpResponseRedirect com URL absoluta para evitar problemas de sess√£o
            from django.http import HttpResponseRedirect
            from django.urls import reverse
            return HttpResponseRedirect(reverse('admin:diagnostics_dashboard'))

        # GET - Exibe formul√°rio
        context = {
            'title': 'Limpar Cache',
            'site_title': 'CG BookStore Admin',
            'site_header': 'Administra√ß√£o CG BookStore',
            'cache_options': [
                {'value': 'all', 'label': 'Todos os Caches (Exceto Sess√µes)'},
                {'value': 'recommendations', 'label': 'Cache de Recomenda√ß√µes'},
                {'value': 'google_books', 'label': 'Cache Google Books'},
                {'value': 'image_proxy', 'label': 'Cache de Imagens'},
            ]
        }

        return render(request, 'admin/diagnostics/clear_cache_form.html', context)

    def task_status(self, request, task_id):
        """Retorna status de uma tarefa em execu√ß√£o"""
        task = self.running_tasks.get(task_id)

        if not task:
            return JsonResponse({'error': 'Tarefa n√£o encontrada'}, status=404)

        return JsonResponse(task, default=str)


# Inst√¢ncia global para uso nas URLs
diagnostics_admin = DiagnosticsAdmin(None)